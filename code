# app.py

import pandas as pd
import numpy as np
import streamlit as st
import plotly.graph_objects as go
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import PolynomialFeatures
from sklearn.model_selection import train_test_split
from sklearn.metrics import r2_score

st.set_page_config(layout="wide")
st.title("üåç Population Growth Prediction")

# Load data
try:
    population_data = pd.read_csv("datasets/Countries_Population_final.csv")
    countries = pd.read_csv("datasets/Countries_names.csv")
except Exception as e:
    st.error(f"Error loading datasets: {e}")
    st.stop()

# User inputs
col1, col2 = st.columns(2)

with col1:
    country = st.selectbox("Select a country", sorted(countries['Country_Name']))
    year_input = st.text_input("Enter a year to predict (e.g., 2030)", "2030")

# Prediction logic
if year_input.isdigit():
    year = int(year_input)
    X = population_data['Year'].values.reshape(-1, 1)
    y = population_data[country]

    # Polynomial Regression
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)
    poly = PolynomialFeatures(degree=2)
    X_poly = poly.fit_transform(X_train)
    model = LinearRegression()
    model.fit(X_poly, y_train)
    prediction = model.predict(poly.transform([[year]]))[0]

    # Accuracy
    test_pred = model.predict(poly.transform(X_test))
    accuracy = r2_score(y_test, test_pred) * 100

    with col1:
        st.subheader("üîç Prediction Results")
        st.write(f"**Country:** {country}")
        st.write(f"**Year:** {year}")
        st.write(f"**Predicted Population:** {int(prediction):,}")
        st.write(f"**Model Accuracy:** {accuracy:.2f}%")

    with col2:
        st.subheader("üìä Population Growth Graph")
        fig = go.Figure()
        fig.add_trace(go.Scatter(x=population_data['Year'], y=population_data[country],
                                 mode='lines+markers', name='Historical'))
        fig.add_trace(go.Scatter(x=[year], y=[prediction],
                                 mode='markers', name='Predicted',
                                 marker=dict(color='red', size=12, symbol='star')))
        st.plotly_chart(fig, use_container_width=True)
else:
    with col1:
        st.warning("Please enter a valid numeric year.")
